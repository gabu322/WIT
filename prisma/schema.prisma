generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
}

datasource db {
    provider = "postgresql"
    url      = "postgresql://postgres:postgres@localhost:5432/workshop_of_iot?schema=public"
}

// Define your data models
model order {
    id          Int      @id @default(autoincrement()) // Unique identifier for orders
    date        DateTime @default(now())              // Date and time of the order

    // Define relationships
    order_items order_item[]
}

model product {
    id             Int      @id @default(autoincrement()) // Unique identifier for products
    name           String   @db.VarChar(255)             // Name of the product
    description    String?  // Description of the product
    shopee_id      String?  // Shopee ID for the product
    targeted_stock Int      // Targeted stock level for the product
    buy_link       String?  // Link for purchasing the product

    // Define relationships
    product_images     product_images[]     // Images associated with the product
    product_variations product_variations[] // Variations of the product
}

model product_images {
    id         Int     @id @default(autoincrement()) // Unique identifier for product images
    product_id Int                                    // ID of the associated product
    link       String                                // Link to the image

    // Define relationships
    product product @relation(fields: [product_id], references: [id])
}

model product_variations {
    id              Int      @id @default(autoincrement()) // Unique identifier for product variations
    product_id      Int                                    // ID of the associated product
    name            String                                 // Name of the variation
    stock           Int                                    // Stock level of the variation
    buy_price       Float                                  // Purchase price of the variation
    sell_price      Float                                  // Selling price of the variation
    image_link      String?                                // Link to the image of the variation
    priority_weight Float?                                 // Priority weight for the variation

    // Define relationships
    product        product       @relation(fields: [product_id], references: [id])
    order_items    order_item[]  // Order items associated with this variation
}

model order_item {
    id                  Int  @id @default(autoincrement()) // Unique identifier for order items
    order_id            Int                                // ID of the associated order
    product_variation_id Int                                // ID of the associated product variation
    quantity            Int                                // Quantity of the product variation in the order

    // Define relationships
    product_variation product_variations @relation(fields: [product_variation_id], references: [id])
    order             order            @relation(fields: [order_id], references: [id])
}
